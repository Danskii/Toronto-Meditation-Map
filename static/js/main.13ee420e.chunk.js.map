{"version":3,"sources":["components/Map/Map.js","components/Footer.js","components/Social.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["require","withScriptjs","withGoogleMap","GoogleMap","KmlLayer","Map","compose","withProps","googleMapURL","loadingElement","react_default","a","createElement","style","height","containerElement","className","mapElement","props","defaultZoom","defaultCenter","lat","lng","url","Math","random","options","preserveViewport","Footer","Component","class","href","target","Container","Row","Col","Main","Jumbotron","App","components_Main","Map_Map","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAQIA,EAAQ,KAJVC,iBACAC,kBACAC,cACAC,aA+BaC,MA5BHC,kBACVC,oBAAU,CACRC,aACE,sFACFC,eAAgBC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,UACpCC,iBAAkBL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kCAAkCH,MAAO,CAAEC,OAAM,UAClFG,WAAYP,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,YAElCb,EACAC,EATUI,CAUV,SAAAY,GAAK,OACLR,EAAAC,EAAAC,cAACT,EAAD,CACEgB,YAAa,GACbC,cAAe,CAAEC,IAAK,kBAAmBC,KAAM,oBAE/CZ,EAAAC,EAAAC,cAACR,EAAD,CACEmB,IACE,8EASiB,KAAhBC,KAAKC,SALRC,QAAS,CAAEC,kBAAkB,2CCTpBC,GCjBMC,6LDCjB,OACEnB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,8BAErBN,EAAAC,EAAAC,cAAA,KAAGkB,MAAM,cAAT,wDAA2EpB,EAAAC,EAAAC,cAAA,KAAGmB,KAAK,+BAA+BC,OAAO,UAA9C,YAA3E,gCAEQtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAWjB,UAAU,wBACnBN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAAKzB,EAAAC,EAAAC,cAAA,KAAGmB,KAAK,4CAA4CC,OAAO,UAA3D,UACLtB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAAKzB,EAAAC,EAAAC,cAAA,KAAGmB,KAAK,4BAA4BC,OAAO,UAA3C,YACLtB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAAKzB,EAAAC,EAAAC,cAAA,KAAGmB,KAAK,6BAA6BC,OAAO,UAA5C,kBAXIH,uBEsCNO,mLAjCX,OAAS1B,EAAAC,EAAAC,cAAA,OACHI,UAAY,sBAChBN,EAAAC,EAAAC,cAAA,OACII,UAAY,qBAChBN,EAAAC,EAAAC,cAAA,OACII,UAAY,0BAChBN,EAAAC,EAAAC,cAAA,OACII,UAAY,yBAChBN,EAAAC,EAAAC,cAAA,OACII,UAAY,wBAChBN,EAAAC,EAAAC,cAAA,OACII,UAAY,yBAChBN,EAAAC,EAAAC,cAAA,OACII,UAAY,yBAbT,IAeDN,EAAAC,EAAAC,cACNyB,EAAA,EADM,CACIrB,UAAY,iCACtBN,EAAAC,EAAAC,cAAA,MACGI,UAAY,uBADf,uBAFM,IAG0DN,EAAAC,EAAAC,cAAA,KAC9DI,UAAY,2CADkD,6DAH1D,IAMFN,EAAAC,EAAAC,cAAA,KACFI,UAAY,0CADV,oDANE,aAjBOa,aCWJS,mLATX,OACE5B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,cANUZ,aCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13ee420e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { compose, withProps } from \"recompose\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nconst {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  KmlLayer\r\n} = require(\"react-google-maps\");\r\n\r\nconst Map = compose(\r\n  withProps({\r\n    googleMapURL:\r\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC80_y_wRg1tKAM59tSszeIiY6tEahwUmc\",\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div className=\"mapWrapper text-focus-in-fourth\" style={{ height: `70vh`}} />,\r\n    mapElement: <div style={{ height: `100%` }} />\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props => (\r\n  <GoogleMap\r\n    defaultZoom={12}\r\n    defaultCenter={{ lat: 43.66249657567853, lng: -79.39037738471677 }}\r\n  >\r\n    <KmlLayer\r\n      url={\r\n        \"http://www.google.com/maps/d/kml?mid=1jhR92EDAFYtvkJFLZDO9CiEADRLmqiqb\" +\r\n        \"&ver=\" +\r\n        generateRandom()\r\n      }\r\n      options={{ preserveViewport: true }}\r\n    />\r\n  </GoogleMap>\r\n));\r\nfunction generateRandom() {\r\n  return Math.random() * 10000000000000000;\r\n}\r\nexport default Map;\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Social from \"../components/Social\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Footer text-focus-in-fifth\">\r\n      {/* <Social /> */}\r\n<p class=\"footerText\">Designed and built with all the love in the world by <a href=\"https://twitter.com/dpuiatti\" target=\"_blank\">dpuiatti</a>. Maintained with your help.</p>\r\n        \r\n        <Container className=\"footerButtonsWrapper\">\r\n          <Row>\r\n            <Col><a href=\"https://danskii.github.io/Daniel-Puiatti/\" target=\"_blank\">About</a></Col>\r\n            <Col><a href=\"mailto:dpuiatti@gmail.com\" target=\"_blank\">Contact</a></Col>\r\n            <Col><a href=\"https://github.com/Danskii\" target=\"_blank\">Git</a></Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Footer;\r\n\r\n","import React, { Component } from \"react\";\r\nimport { Twitter, Facebook, Mail, Whatsapp, Tumblr, Pinterest, Reddit, Telegram, VK, HackerNews } from \"react-social-sharing\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\n\r\nclass Social extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Social\">\r\n        <Row>\r\n        <Col>\r\n            <Mail link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <Whatsapp link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <Twitter link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <Facebook link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <Tumblr link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <Pinterest link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <Reddit link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <Telegram link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <VK link=\"https://github.com\" />\r\n          </Col>\r\n          <Col>\r\n            <HackerNews link=\"https://github.com\" />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Social;\r\n","import React, {\r\n  Component\r\n} from \"react\";\r\nimport {\r\n  Jumbotron\r\n} from \"react-bootstrap\";\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return ( <\r\n      div className = \"Main slide-out-top\" >\r\n      <\r\n      div className = \"ripple-background\" >\r\n      <\r\n      div className = \"circle xxlarge shade1\" / >\r\n      <\r\n      div className = \"circle xlarge shade2\" / >\r\n      <\r\n      div className = \"circle large shade3\" / >\r\n      <\r\n      div className = \"circle mediun shade4\" / >\r\n      <\r\n      div className = \"circle small shade5\" / >\r\n      <\r\n      /div> <\r\n      Jumbotron className = \"homepageWelcome text-blur-out\" >\r\n      <\r\n      h1 className = \"text-focus-in-first\" > Hello and welcome < /h1> <\r\n      p className = \"homepageSubHeading text-focus-in-second\" >\r\n      These are my favourite locations to meditate in Toronto. <\r\n      /p> <\r\n      p className = \"homepageSubHeading text-focus-in-third\" >\r\n      I hope you enjoy discovering them\r\n      for yourself. <\r\n      /p> <\r\n      /Jumbotron>\r\n\r\n      <\r\n      /div>\r\n    );\r\n  }\r\n}\r\nexport default Main;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Map from \"./components/Map\";\r\nimport Footer from \"./components/Footer\";\r\nimport Main from \"./components/Main\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Main />\r\n        <Map />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}